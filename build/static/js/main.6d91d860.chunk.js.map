{"version":3,"sources":["App.js","store.js","index.js"],"names":["API_URL","TIMEOUT","CITY_EXIST","INVALID_ZIP","isCityExist","cities","zipCode","some","city","ListComponent","_ref","_ref$cities","onSelectCity","selectedZipCode","react_default","a","createElement","List","map","App_ListItem","key","concat","selected","ListItem","_ref2","Item","Content","Description","as","onClick","style","background","placeName","state","App","inject","observer","setError","type","store","_this","props","errorMessage","setTimeout","clearError","isErrorResponse","resp","status","turnOffLoader","json","isRequestSuccess","_ref3","places","length","addCity","onAddCity","searchString","url","turnOnLoader","fetch","then","catch","console","log","renderError","className","_this$props$store","this","inputLoader","handleChange","Container","Input","placeholder","value","onChange","Button","primary","loading","disabled","App_ListComponent","Component","City","Object","classCallCheck","initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","observable","action","bound","toConsumableArray","e","target","place","ReactDOM","render","index_module","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.6d91d860.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Button, Input, List, Container } from \"semantic-ui-react\";\nimport { observer, inject } from \"mobx-react\";\nimport \"./index.css\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nconst API_URL = \"http://api.zippopotam.us/us/\";\nconst TIMEOUT = 3000;\nconst MIN_LENGHT_ZIPCODE = 5;\nconst CITY_EXIST = \"City was already added\";\nconst INVALID_ZIP = \"Invalid zip-code\";\n\nconst isCityExist = (cities, zipCode) =>\n  cities.some(city => city.zipCode === zipCode);\n\nconst ListComponent = ({ cities = [], onSelectCity, selectedZipCode }) => {\n  return (\n    <List>\n      {cities.map(city => (\n        <ListItem\n          key={`${city.zipCode}`}\n          onSelectCity={onSelectCity}\n          city={city}\n          selected={selectedZipCode === city.zipCode}\n        />\n      ))}\n    </List>\n  );\n};\n\nconst ListItem = ({ city, onSelectCity, selected }) => (\n  <List.Item key={`${city.zipCode}`}>\n    <List.Content>\n      <List.Description\n        as=\"button\"\n        onClick={() => onSelectCity(city)}\n        style={{ background: selected ? \"#34d04e\" : \"#FFF\" }}\n      >\n        {city.placeName}, {city.state}\n      </List.Description>\n    </List.Content>\n  </List.Item>\n);\n\n@inject(\"store\")\n@observer\nclass App extends Component {\n  setError = type => {\n    const { store } = this.props;\n    store.errorMessage = type;\n    setTimeout(store.clearError, TIMEOUT);\n  };\n\n  isErrorResponse = resp => {\n    if (resp.status !== 200) {\n      this.props.store.turnOffLoader();\n      this.setError(INVALID_ZIP);\n    }\n\n    return resp.json();\n  };\n\n  isRequestSuccess = ({ places }) => {\n    const { store } = this.props;\n\n    store.turnOffLoader();\n\n    if (places && places.length) {\n      store.addCity(places[0]);\n    }\n  };\n\n  onAddCity = () => {\n    const { store } = this.props;\n    if (!store.searchString) return null;\n    const url = `${API_URL}${store.searchString}`;\n\n    if (isCityExist(store.cities, store.searchString)) {\n      this.setError(CITY_EXIST);\n    } else {\n      store.turnOnLoader();\n      fetch(url)\n        .then(this.isErrorResponse)\n        .then(this.isRequestSuccess)\n        .catch(console.log);\n    }\n  };\n\n  renderError = () => {\n    const { errorMessage } = this.props.store;\n    return errorMessage ? <p className=\"error\">{errorMessage}</p> : null;\n  };\n\n  render() {\n    const {\n      searchString,\n      inputLoader,\n      onSelectCity,\n      cities,\n      selectedZipCode,\n      handleChange\n    } = this.props.store;\n\n    return (\n      <Container className=\"App\">\n        <div className=\"form\">\n          <Input\n            className=\"searchInput\"\n            placeholder=\"Search...\"\n            value={searchString}\n            onChange={handleChange}\n          />\n          <Button\n            primary\n            loading={inputLoader}\n            disabled={\n              inputLoader || searchString.length < MIN_LENGHT_ZIPCODE\n            }\n            onClick={this.onAddCity}\n            className=\"addButton\"\n          >\n            go\n          </Button>\n          {this.renderError()}\n        </div>\n        <ListComponent\n          cities={cities}\n          onSelectCity={onSelectCity}\n          selectedZipCode={selectedZipCode}\n        />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","import { observable, action } from \"mobx\";\n\nclass City {\n  @observable placeName;\n  @observable state;\n  @observable zipCode;\n\n  constructor(city, zipCode) {\n    this.placeName = city[\"place name\"];\n    this.state = city[\"state abbreviation\"];\n    this.zipCode = zipCode;\n  }\n}\n\nclass CityStore {\n  @observable cities = [\n    {\n      placeName: \"New York\",\n      state: \"NY\",\n      zipCode: \"10001\"\n    },\n    {\n      placeName: \"Odessa\",\n      state: \"OD\",\n      zipCode: \"65113\"\n    }\n  ];\n  @observable searchString = \"\";\n  @observable inputLoader = false;\n  @observable errorMessage = \"\";\n  @observable selectedZipCode = null;\n\n  @action\n  addCity(city) {\n    this.cities = [...this.cities, new City(city, this.searchString)];\n    this.searchString = \"\";\n  }\n\n  @action.bound\n  handleChange(e) {\n    this.searchString = e.target.value;\n  }\n\n  @action.bound\n  clearError() {\n    this.errorMessage = \"\";\n  };\n\n  @action.bound\n  turnOnLoader() {\n    this.inputLoader = true;\n  };\n\n  @action.bound\n  turnOffLoader() {\n    this.inputLoader = false;\n  };\n\n  @action.bound\n  onSelectCity(place) {\n    if (this.selectedZipCode === place.zipCode) {\n      this.selectedZipCode = null;\n      this.searchString = \"\";\n    } else {\n      this.selectedZipCode = place.zipCode;\n      this.searchString = place.zipCode;\n    }\n  }\n}\n\nconst store = new CityStore();\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"mobx-react\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}